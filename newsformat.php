<?php
// Load a BBC news page and format it for a typical Ceefax news page.
// Uses simple_html_dom.php which can be downloaded from sourceforge
include "simple_html_dom.php";
// We can set up some template values here instead of hard coding them
// Something line
// Copy a header. Find the starting line, style and number of lines.
// Also get ready to load in the footer
$line=4;	// The first line that we can write on.
/**
 * \param $file : Filename of the source page
 * \param $content : The Section attribute from the news page
 * \param $mppss : Magazine, Page number, subcode 10000 to 7FF99
 */
function outputheader($file,$content,$mppss)
{
	// Calculate the next page
	// $next=$mppss[0].(substr($mppss,1,2)+1)%100;
	$next=sprintf("%1d%02d",$mppss[0],(substr($mppss,1,2)+1)%100);	// This is a bit crude. Next page
	//echo "RE,$next\r\n";
	echo "DS,Inserter\r\n";
	echo "SP,$file\r\n";
	echo "DE,Autogenerated from BBC News: $content\r\n";
	echo "PN,$mppss\r\n";	// Page number
	// echo "RE,$content\n";
	echo "CT,15,C\r\n";	// cycle/time TODO
	echo "SC,1\r\n";	// Not sure! Think we need this for subpages
	echo "PS,8040\r\n";	// Page settings TODO
	echo "MS,0\r\n";	// Not sure
	
	echo "OL,0,XXXXXXXXCEEFAX 1 mpp DAY dd MTH hh:nn/ss\r\n"; // An inserter will not use row 0, but wxTED and Muttlee do.
	// Which header do we want?
	
	// BBC News header - "Politics"
	// prolly should remove the slash and all following text
	
	// Here we map from the RSS URL to the old category names. This table is obviously not complete!
// Mapping naar categorieÎn
$category = "UK"; // Default
if (strpos($content, "politics")) $category = "Politics";
if (strpos($content, "world")) $category = "World";
if (strpos($content, "uk")) $category = "UK";
if (strpos($content, "health")) $category = "Health";
if (strpos($content, "technology")) $category = "Technology";
switch ($category) {
	case "Health":
		echo 'OL,1,ój#3kj#3kj#3kîùì | |h<$|,|h4h||4| | '."\r\n";
		echo 'OL,2,ój $kj $kj'." 'kîùì #jw1#ju0j5 #  "."\r\n";
		echo 'OL,3,ó"###"###"###î///,/,-,.,/,-,.-./,/,/////'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";  
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";  
		break;
	case "Technology":
	case "Science and Environment":
	case "Science &amp; Environment":
		echo 'OL,1,Wj#3kj#3kj#3kT]S |,h<$|h<$|0|h<$|,      '."\r\n";
		echo 'OL,2,Wj $kj $kj \'kT]S sju0jw1)ju0s      '."\r\n";
		echo 'OL,3,W"###"###"###T///,,-,.,-,.,/,-,.,,//////'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";  
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";  
		break;
	case "Magazine" : ;
	case "Entertainment and Arts" : ;
	case "Entertainment &amp; Arts" : ;
	case "In Pictures" : ;
	case "Education" : ;
	case "BBC Trending" : ;
	case "Family &amp; Education" : ;
		echo 'OL,1,ój#3kj#3kj#3kîùì    h4h4|,|h<<|h<$'."\r\n";	// Home
		echo 'OL,2,ój $kj $kj \'kîùì    j7k5pj55jw1'."\r\n";
		echo 'OL,3,ó"###"###"###î//////-.-.,,,-..,-,.//////'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";  
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";
		break;
	// Use HOME for want of a better option
	case "Business" : ;	// For mag 1 news, not mag 2 business
	case "UK" : ;
	case "England" : ;
	case "Manchester" : ;
	case "England/Beds Bucks and Herts" : ;
	case "Stoke and Staffordshire" : ;
	case "Stoke &amp; Staffordshire" : ;
	case "Tyne and Wear" : ;
	case "South Yorkshire" : ;
	case "Lancashire" : ;
	case "Suffolk" : ;
	case "Sussex" : ;
	case "Somerset" : ;
	case "England/Birmingham and Black Country" : ;	
	case "Education &amp; Family" : ;
	case "Norfolk" : ;
	case "Hampshire &amp; Isle of Wight" : ;
	case "Devon" : ;
	case "Beds, Herts &amp; Bucks" : ;
	case "Leicester" : ;
	case "The Papers" : ;
	case "Leeds &amp; West Yorkshire" : ;
	case "Dorset" : ;
	case "Essex" : ;
	case "Berkshire" : ;
	case "Cambridgeshire" : ;
	case "Liverpool" : ;
	case "Sheffield &amp; South Yorkshire" : ;
	case "Coventry &amp; Warwickshire" : ;
	case "Nottingham" : ;
	case "Birmingham &amp; Black Country" : ;
	case "Lincolnshire" : ;
	case "Derby" : ;
	case "Highlands &amp; Islands" : ;
	case "Oxford" : ;
	case "Bristol" : ;
	case "Kent" : ;
	case "Humberside" : ;
	case "Surrey" : ;
	case "Northampton" : ;
	case "Tyne &amp; Wear" : ;
	case "Cornwall" : ;
	case "Shropshire" : ;
	case "York &amp; North Yorkshire" : ;
	case "Wiltshire" : ;
	case "Gloucestershire" : ;
	case "Hereford &amp; Worcester" : ;
	case "Tees" : ;
		echo 'OL,1,ój#3kj#3kj#3kîùì    h4h4|,|h<<|h<$'."\r\n";	// Home
		echo 'OL,2,ój $kj $kj \'kîùì    j7k5pj55jw1'."\r\n";
		echo 'OL,3,ó"###"###"###î//////-.-.,,,-..,-,.//////'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";  
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n"; 
		break;
	case "Tayside and Central Scotland" : ;
	case "Scotland" : ;
	case "Scotland/Glasgow and West" : ;
	case "NE Scotland, Orkney &amp; Shetland" : ;
	case "Glasgow &amp; West Scotland" : ;
	case "Edinburgh, Fife &amp; East Scotland" : ;
	case "South Scotland" : ;
	case "Scotland/Scotland politics" : ;
	case "Scotland business" : ;
		echo 'OL,1,Wj#3kj#3kj#3kD]S`<$|,h<|(|$| `<l0|th4|l0'."\r\n";
		echo 'OL,2,Wj $kj $kj \'kT]Sb{%pju  pj7k5"o5x%'."\r\n";
		echo 'OL,3,W"###"###"###T//-,/,,-,,/,/,,-.-.,/-.,,/'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";
		break;
	case "Northern Ireland" : ;
	case "Foyle &amp; West" : ;
	case "Northern Ireland Election 2017" : ;
	    echo 'OL,1,ój#3kj#3kj#3kîùì|0| h4|l4|,h4`<thth4|l0'."\r\n";	// N.I.
		echo 'OL,2,ój $kj $kj'." 'kîùì+`j5k4sjuj7j7o5z%"."\r\n";
		echo 'OL,3,ó"###"###"###î//,/,--.,-.,,-,-.,-.-.,,//'."\r\n";
		echo 'OL,22,T]GN IRELANDCHeadlinesG160CSport   G390 '."\r\n";
		echo 'OL,23,D]GNATIONALC Main menuG100CWeatherG 400 '."\r\n";
		break;
	case "Wales" : ;
	case "North West Wales" : ;
	case "North East Wales" : ;
	case "South East Wales" : ;
	case "South West Wales" : ;
		echo 'OL,1,Wj#3kj#3kj#3kD]S   h44|`<l0| h<$x,'."\r\n";
		echo 'OL,2,Wj $kj $kj \'kT]S   *uu?j7k5pjw1s?'."\r\n";
		echo 'OL,3,W"###"###"###T//////,,.-.-.,,-,.,.//////'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";
		break;
	case "London" : ;
		echo 'OL,1,Wj#3kj#3kj#3kD]S | h<|h|0|h<th<|h|0|'."\r\n";
		echo 'OL,2,Wj $kj $kj \'kT]S pjuj5+ju>juj5+'."\r\n";
		echo 'OL,3,W"###"###"###T///,,-,,-./,-,.-,,-./,////'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";
		break;
	case "Europe" : ;
	case "House of Commons" : ;
	case "Asia" : ;
	case "Africa" : ;
	case "Middle East" : ;
	case "World/Asia/China" : ;
	case "Latin America" : ;
	case "US and Canada" : ;
	case "US &amp; Canada" : ;
	case "World" : ;
	case "China" : ;
	case "Latin America &amp; Caribbean" : ;
	case "US Election 2016" : ;
	case "Australia" : ;
	case "India" : ;
	case "China blog" : ;
	case "Cumbria" : ;
	case "South Asia" : ;
		echo 'OL,1,ój#3kj#3kj#3kîùì   |hh4|,|h<l4| h<l0'."\r\n";    // World
		echo 'OL,2,ój $kj $kj \'kîùì   ozz%pj7k4pjuz%'."\r\n";        
		echo 'OL,3,ó"###"###"###î/////-,,/,,,-.-.,,-,,/////'."\r\n";
		echo 'OL,22,ÑùÉHome news digestá141ÉWorld digestá142'."\r\n";
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";
		break;
	
	case "UK Politics" : ;
	case "Politics" : ;
	case "Scotland politics" : ;
	case "Wales politics" : ;
	case "N. Ireland Politics" : ;
		echo 'OL,1,ój#3kj#3kj#3kîùì h<|h<|h4 |(|$|h<$|,$ '."\r\n";	// Politics
		echo 'OL,2,ój $kj $kj \'kîùì j7#juju0  ju0s{5 '."\r\n";
		echo "OL,3,ó\"###\"###\"###î///-./-,,-,.,/,/,-,.,,.///\r\n";
		echo 'OL,22,ÑùÉParliament and politics digest...á144'."\r\n";  
		echo 'OL,23,ÑùÉNews Indexá102ÉFlashá150ÉRegionalá160'."\r\n";
		break;
	
	default:
		echo "OL,1,Wj#3kj#3kj#3kT]S     xl0|,h44|h,$\r\n";
		echo 'OL,2,Wj $kj $kj \'kT]S     j5s*uu?bs5'."\r\n";
		echo 'OL,3,W"###"###"###T///////,-.,,/,,.-,.///////'."\r\n";
		echo "OL,22,D]CHome news digestG141CWorld digestG142\r\n";
		echo "OL,23,D]CNews IndexG102CFlashG150CRegionalG160\r\n";
		break;
		}
	if ($next>124)
		echo 'OL,24,ÅIn Depth ÇNews IndxÉHeadlinesÜMain Menu'."\r\n";
	else
		echo 'OL,24,ÅNext NewsÇNews IndxÉHeadlinesÜMain Menu'."\r\n";
	printf( "FL,%d,102,101,100,F,100\r\n",$next);
}

function outputline($lineNumber,$colour,$text,$maxline)
{
	$utext=	htmlspecialchars_decode ($text,ENT_QUOTES);		// Decode html entities
	$utext=explode('\r\n',wordwrap($utext,39,'\r\n'));		// Wrap the text into separate lines
	//echo "CO,".count($utext)."\r\n";
	if (count($utext)+$lineNumber>$maxline)					// This would overflow so forget it
	{	
		return 0;
	}
	$count=0;
	foreach ($utext as $line)							// Output all the lines
	{
		$ln=$lineNumber+$count;
		echo "OL,".$ln.",$colour$line\r\n";
		$count++;
	}
	return $count; 	// return the number lines used
}

$page="page0.html";		// The default input name
$mpp="10000";
/* From the command line?
 * newsformat.php <source news page> <target text page>
 * Example: php newsformat.php page0.html 10000
 */
if (isset($argc))
{
	$page=$argv[1];
	if ($argc>2)
		$mpp=$argv[2];
	//echo "Page=$page, argc=$argc\n";
}

$html = file_get_html($page);	// Get the whole file
$found=false;

// Modern BBC News structure
if (is_object($html))
{
	// Try to get category from og:url meta tag (still used)
	$cat= $html->find('meta[property="og:url"]');
	if (count($cat) > 0) {
		outputheader($page,$cat[0]->content,$mpp);
	} else {
		// Fallback to canonical URL
		$canonical = $html->find('link[rel="canonical"]');
		if (count($canonical) > 0) {
			outputheader($page,$canonical[0]->href,$mpp);
		} else {
			outputheader($page,"BBC News Article",$mpp);
		}
	}
	
	// Updated selectors for modern BBC News structure
	// Try different selectors for the main content area
	$body = null;
	$bodySelectors = [
		'main[role="main"]',
		'main',
		'article',
		'div[data-module="ArticleBody"]',
		'div[data-component="body-content"]',
		'div[class*="article-body"]',
		'div[class*="story-body"]'
	];
	
	foreach ($bodySelectors as $selector) {
		$bodyElements = $html->find($selector);
		if (count($bodyElements) > 0) {
			$body = str_get_html($bodyElements[0]);
			break;
		}
	}
	
	if (!$body) {
		// If no specific body found, use the whole document
		$body = $html;
	}
	
	// Try to get the title - modern BBC uses og:title meta tag
	$titleFound = false;
	$titleSelectors = [
		'meta[property="og:title"]',
		'meta[name="twitter:title"]',
		'title',
		'h1'
	];
	
	foreach ($titleSelectors as $selector) {
		$element = $html->find($selector);
		if (count($element) > 0) {
			if ($selector == 'meta[property="og:title"]' || $selector == 'meta[name="twitter:title"]') {
				$line += outputline($line,'É',$element[0]->content,21);
			} else if ($selector == 'title') {
				$titleText = $element[0]->plaintext;
				// Remove " - BBC News" suffix if present
				$titleText = preg_replace('/ - BBC News$/', '', $titleText);
				$line += outputline($line,'É',$titleText,21);
			} else {
				$line += outputline($line,'É',$element[0]->plaintext,21);
			}
			$titleFound = true;
			break;
		}
	}
	
	if (!$titleFound) {
		$line += outputline($line,'É',"BBC News Article",21);
	}
	
	// Try to find introduction paragraph with modern selectors
	$introSelectors = [
		'p[class*="introduction"]',
		'p[class*="intro"]',
		'div[class*="introduction"] p',
		'div[class*="intro"] p',
		'p[data-component="text-block"]:first-child',
		'div[data-component="text-block"] p:first-child'
	];
	
	$introFound = false;
	foreach ($introSelectors as $selector) {
		$intro = $body->find($selector);
		if (count($intro) > 0) {
			$line += outputline($line,' ',$intro[0]->plaintext,21);
			$introFound = true;
			$found = true;
			break;
		}
	}
	
	if (!$introFound) {
		// Fallback: try to find the first substantial paragraph
		$paragraphs = $body->find('p');
		foreach ($paragraphs as $p) {
			$text = trim($p->plaintext);
			if (strlen($text) > 50) { // Only consider substantial paragraphs
				$line += outputline($line,' ',$text,21);
				$found = true;
				break;
			}
		}
	}
	
	if (!$found) {
		$line += outputline($line,' ',"Introduction paragraph not found",21);
	}
	
	$line++; // Extra line space
	
	// Process remaining paragraphs
	$paracount = 0;
	$paragraphs = $body->find('p');
	$startProcessing = false;
	
	foreach ($paragraphs as $element) {
		if ($paracount > 4) break;
		if ($line > 21) break;
		
		$text = trim($element->plaintext);
		if (strlen($text) < 20) continue; // Skip very short paragraphs
		
		// Skip if this is the intro paragraph we already processed
		if (!$startProcessing && $introFound) {
			// Check if this paragraph contains similar text to what we already output
			$startProcessing = true;
			continue;
		}
		
		if ($found || $startProcessing) {
			$line += outputline($line,'Ü',$text,21);
			$paracount++;
		}
	}
}
else {
	outputheader($page,"This page needs some work",$mpp);
}

if (!$found) {
	echo "OL,5,Sorry, this story cannot be displayed\r\n";
	echo "OL,6,The page structure may have changed\r\n";
}
?>